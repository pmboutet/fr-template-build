@isTest
public class SFFR_BulkHelpers_ComplexAddTest {
	@isTest
    private static void testcomputeComplexAdd() {
        List<SFFR_BulkHelpers_ComplexAdd.Input> inputs = new List<SFFR_BulkHelpers_ComplexAdd.Input>();
        SFFR_BulkHelpers_ComplexAdd.Input input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '123456';
        input.externalKey = 'key1';
        input.externalKey2 = 'key1.1';
        input.InitialSum1 = 0;
        input.IncrementSum1 = 1;
        input.InitialSum2 = 100;
        input.IncrementSum2 = 10;
        input.MaxSum1 = 1;
        inputs.add(input);
        input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '123456';
        input.externalKey = 'key1';
        input.externalKey2 = 'key1.1';
        input.IncrementSum1 = 1;
        input.IncrementSum2 = 20;
        input.MaxSum1 = 1;
        inputs.add(input);
        input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '1234567';
        input.externalKey = 'key2';
        input.externalKey2 = 'key2.1';
        input.InitialSum1 = 1;
        input.InitialSum2 = 10;
        input.MaxSum1 = 10;
        inputs.add(input);
        input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '1234567';
        input.externalKey = 'key2';
        input.externalKey2 = 'key2.1';
        input.InitialSum1 = 1;
        input.InitialSum2 = 20;
        input.MaxSum1 = 10;
        inputs.add(input);
		input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '';
        input.externalKey = 'key3';
        input.externalKey2 = 'key3.1';
        input.InitialSum1 = 1;
        input.InitialSum2 = 20;
        input.MaxSum1 = 2;
		inputs.add(input);
		input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '';
        input.externalKey = 'key3';
        input.externalKey2 = 'key3.1';
        input.InitialSum1 = 1;
        input.InitialSum2 = 20;
        input.MaxSum1 = 2;
        inputs.add(input);
		input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '';
        input.externalKey = 'key3';
        input.externalKey2 = 'key3.1';
        input.InitialSum1 = 1;
        input.InitialSum2 = 15;
        input.MaxSum1 = 2;
        inputs.add(input);
       	List<SFFR_BulkHelpers_ComplexAdd.Output> outputs = SFFR_BulkHelpers_ComplexAdd.computeComplexAdd(inputs);
        System.assertEquals(inputs.size(), outputs.size());
        System.Debug(inputs);
        System.Debug(outputs[0]);
        System.Debug(outputs[1]);
        System.Debug(outputs[2]);
        System.Debug(outputs[3]);
		System.Debug(outputs[4]);
        System.Debug(outputs[5]);
        System.Debug(outputs[6]);
       	System.assertEquals('123456', outputs[0].internalKey);
        System.assertEquals(1, outputs[0].ComputedSum1);
        System.assertEquals(10, outputs[0].ComputedSum2);
        System.assertEquals(1, outputs[1].ComputedSum1);
        System.assertEquals(20, outputs[1].ComputedSum2);
        System.assertEquals(2, outputs[2].ComputedSum1);
        System.assertEquals(30, outputs[2].ComputedSum2);
        System.assertEquals(40, outputs[4].ComputedSum2);
    }
	@isTest
    private static void testcomputeSimpleAdd() {
        List<SFFR_BulkHelpers_ComplexAdd.Input> inputs = new List<SFFR_BulkHelpers_ComplexAdd.Input>();
        SFFR_BulkHelpers_ComplexAdd.Input input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '';
        input.externalKey = '1';
        input.externalKey2 = '';
        input.InitialSum1 = 10;
        inputs.add(input);
        input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '';
        input.externalKey = '1';
        input.externalKey2 = '';
        input.InitialSum1 = 20;
        inputs.add(input);
        input = new SFFR_BulkHelpers_ComplexAdd.Input();
        input.internalKey = '';
        input.externalKey = '3';
        input.externalKey2 = '';
        input.InitialSum1 = 30;
        inputs.add(input);
       	List<SFFR_BulkHelpers_ComplexAdd.Output> outputs = SFFR_BulkHelpers_ComplexAdd.computeComplexAdd(inputs);
        System.assertEquals(inputs.size(), outputs.size());
       	System.assertEquals('1', outputs[0].externalKey);
        System.assertEquals(1, outputs[0].ComputedSum1);
        System.assertEquals(110, outputs[0].ComputedSum2);
        System.Debug(inputs);
        System.Debug(outputs);
    }
}